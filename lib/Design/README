
class _VentasSucursalDetalleState extends State<VentasSucursalDetalle> {

  bool loading = false;
  List<Map<String, dynamic>> datosC1 = [];

  double sumaVentaNetaTotal = 0.0;
  Map<String, double> ventaNetaPorSucursal = {};
  String selectedSucursal = 'Todas las sucursales';
  List<String> sucursalesOptions = ['Todas las sucursales'];
  List<Map<String, dynamic>> filtrarDatosPorSucursalTabla(
      List<Map<String, dynamic>> datos, String sucursal) {
    if (sucursal == 'Todas las sucursales') {
      return datos;
    } else {
      return datos.where((dato) => dato['nombre'] == sucursal).toList();
    }
  }
int currentPage = 0;
  int rowsPerPage = 4;
  @override
  void initState() {
    super.initState();
    obtenerNombreUsuario().then((_) {
      if (nombre.isNotEmpty) {
        obtenerNombreEmpresa();
        obtenerSiglasEmpresa().then((_) {
          obtenerDatos().then((data) {
            setState(() {
              datosC1 = data;
              calcularEstadisticas();
              calcularVentaNetaPorSucursal();
              actualizarListaSucursales();
            });
          });
        }).catchError((error) {
          mostrarError('Error al obtener las siglas de la empresa: $error');
        });
      } else {
        mostrarError('Nombre de usuario no cargado.');
      }
    });
  }

  Future<String> obtenerNombreUsuario() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      nombre = prefs.getString('Nombre') ?? '';
    });
    print('Nombre cargado de SharedPreferences: $nombre');
    return nombre;
  }

  Future<void> obtenerNombreEmpresa() async {
    String nombreEmpresa = await MenuHelper.obtenerNombreEmpresa();
    setState(() {
      empresa = nombreEmpresa;
    });
  }

  Future<void> obtenerRolUsuario() async {
    String rol = await MenuHelper.obtenerRolUsuario();
    setState(() {
      rolUsuario = rol;
    });
  }

  Future<void> obtenerSiglasEmpresa() async {
    String siglas = await MenuHelper.obtenersiglasEmpresa();
    setState(() {
      empresaSiglas = siglas;
    });
  }

  Future<List<Map<String, dynamic>>> obtenerDatos() async {
    setState(() {
      loading = true;
    });

    // Limpia los datos antes de cargar nuevos datos
    datosC1.clear();

    final url =
        'https://www.nhubex.com/ServGenerales/General/ejecutarStoredGenericoWithFormat/$empresaSiglas?stored_name=rep_venta_Sucursal_Detalle&attributes=%7B%22DATOS%22:%7B%22ubicacion%22:%22%22,%22uactivo%22:%22$nombre%22,%22fini%22:%22$fecha%22,%22ffin%22:%22$fecha%22%7D%7D&format=JSON&isFront=true';

    try {
      final response = await Dio().get(url);
      if (response.statusCode == 200) {
        final Map<String, dynamic> data = json.decode(response.data);
        final List<dynamic> c1Data = data['RESPUESTA']['C1'];

        // Procesa y almacena los datos recibidos en `datosC1`
        for (var item in c1Data) {
          Map<String, dynamic> itemLowerCase = {};
          item.forEach((key, value) {
            itemLowerCase[key.toLowerCase()] = value;
          });
          datosC1.add(itemLowerCase);
        }

        // Calcular los totales
        double totalVenta = 0;
        double totalDevoluciones = 0;
        double totalVentasMenosDev = 0;
        double totalVentaNeta = 0;
        double totalImpuestos = 0;
        double totalTickets = 0;
        double totalPiezas = 0;

        for (var registro in datosC1) {
          totalVenta += double.tryParse(registro['venta'] ?? '0.0') ?? 0.0;
          totalDevoluciones +=
              double.tryParse(registro['devoluciones'] ?? '0.0') ?? 0.0;
          totalVentaNeta +=
              double.tryParse(registro['venta_neta'] ?? '0.0') ?? 0.0;
          totalVentasMenosDev +=
              double.tryParse(registro['ventasmenosdev'] ?? '0.0') ?? 0.0;
          totalImpuestos +=
              double.tryParse(registro['impuestos'] ?? '0.0') ?? 0.0;
          totalTickets += double.tryParse(registro['tickets'] ?? '0.0') ?? 0.0;
          totalPiezas += double.tryParse(registro['piezas'] ?? '0.0') ?? 0.0;
        }
        // Ordenar unionParametros por 'venta_neta' de mayor a menor
        datosC1.sort((a, b) {
          double ventaNetaA = double.tryParse(a['venta_neta'] ?? '0') ?? 0;
          double ventaNetaB = double.tryParse(b['venta_neta'] ?? '0') ?? 0;
          return ventaNetaB.compareTo(ventaNetaA);
        });

        // Actualizar el estado de los totales
        setState(() {
          totalVentaTotal = totalVenta;
          totalDevolucionesTotal = totalDevoluciones;
          totalVentasMenosDevTotal = totalVentasMenosDev;
          totalVentaNetaTotal = totalVentaNeta;
          totalImpuestosTotal = totalImpuestos;
          totalTicketsTotal = totalTickets;
          totalPiezasTotal = totalPiezas;
          // Calcular el promedio de venta neta por ticket
          totalPromedioTicket = totalVentaNetaTotal / totalTicketsTotal;
        });

        return datosC1;
      } else {
        mostrarError(
            'Error al obtener los datos del JSON. Código de estado: ${response.statusCode}');
        return [];
      }
    } catch (e) {
      print('Error: $e');
      mostrarError('Error al cargar los datos.');
      return [];
    } finally {
      setState(() => loading = false);
    }
  }

  void mostrarError(String mensaje) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(mensaje)),
    );
  }

  void calcularEstadisticas() {
    sumaVentaNetaTotal = datosC1.fold<double>(0, (previousValue, element) {
      return previousValue +
          (double.tryParse(element['Venta_Neta'] ?? '0.0') ?? 0.0);
    });
  }

  void calcularVentaNetaPorSucursal() {
    for (var item in datosC1) {
      final nombreSucursal = item['nombre'] as String;
      final ventaNeta = double.tryParse(item['Venta_Neta'] ?? '0.0') ?? 0.0;
      ventaNetaPorSucursal[nombreSucursal] =
          (ventaNetaPorSucursal[nombreSucursal] ?? 0) + ventaNeta;
    }
  }


  List<String> obtenerUbicacionesUnicas(List<Map<String, dynamic>> datos) {
    Set<String> ubicaciones = Set();
    for (var dato in datos) {
      if (dato['ubicacion'] != null) {
        ubicaciones.add(dato['ubicacion'].toString());
      }
    }
    return ubicaciones.toList();
  }

  void actualizarListaSucursales() {
    Set<String> sucursales = Set();
    for (var dato in datosC1) {
      if (dato['nombre'] != null) {
        sucursales.add(dato['nombre'].toString());
      }
    }
    setState(() {
      sucursalesOptions.clear();
      sucursalesOptions.add('Todas las sucursales');
      sucursalesOptions.addAll(sucursales);
      selectedSucursal = 'Todas las sucursales';
    });
  }
  ////CALCULAR FORMA DE PAGO

  // Totales
  double totalVentaTotal = 0;
  double totalDevolucionesTotal = 0;
  double totalVentaNetaTotal = 0;
  double totalVentasMenosDevTotal = 0;
  double totalImpuestosTotal = 0;
  double totalTicketsTotal = 0;
  double totalPromedioTicket = 0;
  double totalPiezasTotal = 0;

  double calcularSumaVentaNetaTotal() {
    final datosFiltrados =
        filtrarDatosPorSucursalTabla(datosC1, selectedSucursal);
    return datosFiltrados.fold<double>(0, (previousValue, element) {
      return previousValue +
          (double.tryParse(element['venta_neta'] ?? '0.0') ?? 0.0);
    });
  }

  int daysInMonth(int month, int year) {
    return DateTime(year, month + 1, 0).day;
  }

  String formatNumber(String value) {
    double numericValue = double.tryParse(value) ?? 0.0;
    NumberFormat formatter = NumberFormat('#,##0.00');
    return formatter.format(numericValue);
  }

  String calcularTotal(String columna) {
    double total = 0.0;
    for (var param in datosC1) {
      if (param['nombre'] == selectedSucursal ||
          selectedSucursal == 'Todas las sucursales') {
        double valor = double.tryParse(param[columna] ?? '0.0') ?? 0.0;
        total += valor;
      }
    }
    return total.toStringAsFixed(2); // Ajusta la precisión según sea necesario
  }

  @override
  Widget build(BuildContext context) {
    double ventaNetaTotal = double.tryParse(calcularTotal('venta_neta')) ?? 0.0;

    return Scaffold(
      body: SingleChildScrollView(
        child: loading
            ? const Center(
                child: CircularProgressIndicator(),
              )
            : Column(
                children: [

                  Container(
                    height: 300,
                    child: SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: CustomDataTable(
                        columns: const [
                          DataColumn(label: Text('Ubicación')),
                          DataColumn(label: Text('Sucursal')),
                          DataColumn(label: Text('Fecha')),
                          DataColumn(label: Text('Venta Neta')),
                          DataColumn(label: Text('Devoluciones')),
                          DataColumn(label: Text('Ventas Menos Dev')),
                          DataColumn(label: Text('Venta Sin Impuesto')),
                          DataColumn(label: Text('Impuestos')),
                          DataColumn(label: Text('Tickets')),
                          DataColumn(
                            label: Text(
                              'Promedio Tickets',
                            ), // Nueva columna para la venta neta por ticket
                          ),
                          DataColumn(label: Text('Piezas')),
                        ],
                        rows: filtrarDatosPorSucursalTabla(
                                datosC1, selectedSucursal)
                            .map((datos) {
                          final double ventaNeta =
                              double.tryParse(datos['venta_neta'] ?? '0.0') ??
                                  0.0;
                          final int tickets =
                              int.tryParse(datos['tickets'] ?? '0') ?? 0;
                          final double ventaNetaPorTicket =
                              tickets != 0 ? ventaNeta / tickets : 0.0;

                          return DataRow(
                            cells: [
                              DataCell(Text(datos['ubicacion'] ?? '')),
                              DataCell(Text(datos['nombre'] ?? '')),
                              DataCell(Text(datos['fecha'] ?? '')),
                              DataCell(Text(
                                  NumberFormat('#,###.00').format(ventaNeta))),
                              DataCell(Text(NumberFormat('#,###.00').format(
                                  double.tryParse(
                                          datos['devoluciones'] ?? '0.0') ??
                                      0.0))),
                              DataCell(Text(NumberFormat('#,###.00').format(
                                  double.tryParse(
                                          datos['ventasmenosdev'] ?? '0.0') ??
                                      0.0))),
                              DataCell(Text(NumberFormat('#,###.00').format(
                                  double.tryParse(datos['venta'] ?? '0.0') ??
                                      0.0))),
                              DataCell(Text(NumberFormat('#,###.00').format(
                                  double.tryParse(
                                          datos['impuestos'] ?? '0.0') ??
                                      0.0))),
                              DataCell(Text(
                                  NumberFormat('#,###.00').format(tickets))),
                              DataCell(
                                  Text(ventaNetaPorTicket.toStringAsFixed(2))),
                              DataCell(Text(NumberFormat('#,###.00').format(
                                  double.tryParse(datos['piezas'] ?? '0.0') ??
                                      0.0))),
                            ],
                          );
                        }).toList(),
                        footerRows: [
                          DataRow(cells: [
                            const DataCell(Text('')),
                            const DataCell(Text('')),
                            const DataCell(
                              Text('Total',
                                  style:
                                      TextStyle(fontWeight: FontWeight.bold)),
                            ),
                            DataCell(
                              Text(
                                formatNumber(calcularTotal('venta_neta')),
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold),
                              ),
                            ),
                            DataCell(
                              Text(
                                formatNumber(calcularTotal('devoluciones')),
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold),
                              ),
                            ),
                            DataCell(
                              Text(
                                formatNumber(calcularTotal('ventasmenosdev')),
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold),
                              ),
                            ),
                            DataCell(
                              Text(
                                formatNumber(calcularTotal('venta')),
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold),
                              ),
                            ),
                            DataCell(
                              Text(
                                formatNumber(calcularTotal('impuestos')),
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold),
                              ),
                            ),
                            DataCell(
                              Text(
                                formatNumber(calcularTotal('tickets')),
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold),
                              ),
                            ),
                            DataCell(
                              Text(
                                formatNumber((ventaNetaTotal /
                                        (double.tryParse(
                                                calcularTotal('tickets')) ??
                                            1))
                                    .toStringAsFixed(2)),
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold),
                              ),
                            ),
                            DataCell(
                              Text(
                                formatNumber(calcularTotal('piezas')),
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold),
                              ),
                            ),
                          ]),
                        ],
                     
                      ),
                    ),
                  ),
                   Row(
                          mainAxisAlignment: MainAxisAlignment
                              .center, // Centrar los elementos horizontalmente
                          children: [
                            ElevatedButton(
                              onPressed: currentPage > 0
                                  ? () {
                                      setState(() {
                                        currentPage--;
                                      });
                                    }
                                  : null,
                              child: const Text('Anterior'),
                            ),
                            const SizedBox(width: 16),
                            ElevatedButton(
                              onPressed: (currentPage + 1) * rowsPerPage <
                                      ventasPorSucursalYFormaPago.length
                                  ? () {
                                      setState(() {
                                        currentPage++;
                                      });
                                    }
                                  : null,
                              child: const Text('Siguiente'),
                            ),
                          ],
                        ),
                      
                ],
              ),
      ),
    );
  }
}
